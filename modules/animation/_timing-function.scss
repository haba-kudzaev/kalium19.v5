@use '../config' as *;
@use '../prefixer' as *;
@use '../utils/is-valid' as *;
@use '../_dev' as *;

/// @access private
/// @type List
$_variants: ease ease-in ease-out ease-in-out linear step-start step-end;

/// Миксин `animation-timing-function()` также является лишь обёрткой над
/// миксином `prefixer()`, который добавляет CSS-свойству
/// `animation-timing-function` браузерные префиксы (в нашем случае префиксы
/// прописаны в переменной `$prfxs_animation-timing-function`).
/// ---
/// @name animation-timing-function
/// @since 4.0.0
/// @group mixin.animation
/// @access public
/// @author Haba Kudzaev
/// @link https://github.com/rx1310/kalium19
///	@example scss Пример использования в Sass
/// 	.block {
/// 		@include animation-timing-function(step-start);
/// 	}
/// @example css Результат в CSS
/// 	.block {
/// 	  -webkit-animation-timing-function: step-start;
/// 	  -moz-animation-timing-function: step-start;
/// 	  -o-animation-timing-function: step-start;
/// 	  animation-timing-function: step-start;
/// 	}
/// @see {Variable} $prfxs_animation-timing-function
/// @require {Mixin} prefixer
/// @param {String} $value [ease] - значение свойства `animation-timing-function`
@mixin animation-timing-function($value: ease) {

	@if is-valid($value, $_variants) {
		// ? [1] передаем префиксеру свойство, к которому надо добавить префиксы
		// ? [2] передаем префиксеру значение свойства
		// ? [3] передаем префиксеру список префиксов, которые должны быть добавлены к свойству
		@include prefixer(
			animation-timing-function, // 1
			$value, // 2
			$prfxs_animation-timing-function // 3
		);
	} @else {
		@include error-invalid-value(animation-timing-function, $value);
	}

}

/// Миксин `animation-timing-function-ease()` использует миксин
/// `animation-timing-function()` и передает ему значение `ease`
/// ---
/// @name animation-timing-function-ease
/// @since 4.0.0
/// @group mixin.animation
/// @access public
/// @author Haba Kudzaev
/// @link https://github.com/rx1310/kalium19
///	@example scss Пример использования в Sass
/// 	.block {
/// 		@include animation-timing-function-ease();
/// 	}
/// @example css Результат в CSS
/// 	.block {
/// 	  -webkit-animation-timing-function: ease;
/// 	  -moz-animation-timing-function: ease;
/// 	  -o-animation-timing-function: ease;
/// 	  animation-timing-function: ease;
/// 	}
/// @require {Mixin} animation-timing-function
@mixin animation-timing-function-ease {
	@include animation-timing-function(ease);
}

/// Миксин `animation-timing-function-ease-in()` использует миксин
/// `animation-timing-function()` и передает ему значение `ease-in`
/// ---
/// @name animation-timing-function-ease-in
/// @since 4.0.0
/// @group mixin.animation
/// @access public
/// @author Haba Kudzaev
/// @link https://github.com/rx1310/kalium19
///	@example scss Пример использования в Sass
/// 	.block {
/// 		@include animation-timing-function-ease-in();
/// 	}
/// @example css Результат в CSS
/// 	.block {
/// 	  -webkit-animation-timing-function: ease-in;
/// 	  -moz-animation-timing-function: ease-in;
/// 	  -o-animation-timing-function: ease-in;
/// 	  animation-timing-function: ease-in;
/// 	}
/// @require {Mixin} animation-timing-function
@mixin animation-timing-function-ease-in  {
	@include animation-timing-function(ease-in);
}

/// Миксин `animation-timing-function-ease-out()` использует миксин
/// `animation-timing-function()` и передает ему значение `ease-out`
/// ---
/// @name animation-timing-function-ease-out
/// @since 4.0.0
/// @group mixin.animation
/// @access public
/// @author Haba Kudzaev
/// @link https://github.com/rx1310/kalium19
///	@example scss Пример использования в Sass
/// 	.block {
/// 		@include animation-timing-function-ease-out();
/// 	}
/// @example css Результат в CSS
/// 	.block {
/// 	  -webkit-animation-timing-function: ease-out;
/// 	  -moz-animation-timing-function: ease-out;
/// 	  -o-animation-timing-function: ease-out;
/// 	  animation-timing-function: ease-out;
/// 	}
/// @require {Mixin} animation-timing-function
@mixin animation-timing-function-ease-out {
	@include animation-timing-function(ease-out);
}

/// Миксин `animation-timing-function-ease-in-out()` использует миксин
/// `animation-timing-function()` и передает ему значение `ease-in-out`
/// ---
/// @name animation-timing-function-ease-in-out
/// @since 4.0.0
/// @group mixin.animation
/// @access public
/// @author Haba Kudzaev
/// @link https://github.com/rx1310/kalium19
///	@example scss Пример использования в Sass
/// 	.block {
/// 		@include animation-timing-function-ease-in-out();
/// 	}
/// @example css Результат в CSS
/// 	.block {
/// 	  -webkit-animation-timing-function: ease-in-out;
/// 	  -moz-animation-timing-function: ease-in-out;
/// 	  -o-animation-timing-function: ease-in-out;
/// 	  animation-timing-function: ease-in-out;
/// 	}
/// @require {Mixin} animation-timing-function
@mixin animation-timing-function-ease-in-out {
	@include animation-timing-function(ease-in-out);
}

/// Миксин `animation-timing-function-linear()` использует миксин
/// `animation-timing-function()` и передает ему значение `linear`
/// ---
/// @name animation-timing-function-linear
/// @since 4.0.0
/// @group mixin.animation
/// @access public
/// @author Haba Kudzaev
/// @link https://github.com/rx1310/kalium19
///	@example scss Пример использования в Sass
/// 	.block {
/// 		@include animation-timing-function-linear();
/// 	}
/// @example css Результат в CSS
/// 	.block {
/// 	  -webkit-animation-timing-function: linear;
/// 	  -moz-animation-timing-function: linear;
/// 	  -o-animation-timing-function: linear;
/// 	  animation-timing-function: linear;
/// 	}
/// @require {Mixin} animation-timing-function
@mixin animation-timing-function-linear {
	@include animation-timing-function(linear);
}

/// Миксин `animation-timing-function-step-start()` использует миксин
/// `animation-timing-function()` и передает ему значение `step-start`
/// ---
/// @name animation-timing-function-step-start
/// @since 4.0.0
/// @group mixin.animation
/// @access public
/// @author Haba Kudzaev
/// @link https://github.com/rx1310/kalium19
///	@example scss Пример использования в Sass
/// 	.block {
/// 		@include animation-timing-function-step-start();
/// 	}
/// @example css Результат в CSS
/// 	.block {
/// 	  -webkit-animation-timing-function: step-start;
/// 	  -moz-animation-timing-function: step-start;
/// 	  -o-animation-timing-function: step-start;
/// 	  animation-timing-function: step-start;
/// 	}
/// @require {Mixin} animation-timing-function
@mixin animation-timing-function-step-start {
	@include animation-timing-function(step-start);
}

/// Миксин `animation-timing-function-step-end()` использует миксин
/// `animation-timing-function()` и передает ему значение `step-end`
/// ---
/// @name animation-timing-function-step-end
/// @since 4.0.0
/// @group mixin.animation
/// @access public
/// @author Haba Kudzaev
/// @link https://github.com/rx1310/kalium19
///	@example scss Пример использования в Sass
/// 	.block {
/// 		@include animation-timing-function-step-end();
/// 	}
/// @example css Результат в CSS
/// 	.block {
/// 	  -webkit-animation-timing-function: step-end;
/// 	  -moz-animation-timing-function: step-end;
/// 	  -o-animation-timing-function: step-end;
/// 	  animation-timing-function: step-end;
/// 	}
/// @require {Mixin} animation-timing-function
@mixin animation-timing-function-step-end {
	@include animation-timing-function(step-end);
}
